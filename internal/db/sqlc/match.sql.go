// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: match.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserMatches = `-- name: GetUserMatches :many
SELECT 
    match_data.match_id,
    match_data.match_date,
    match_data.matched_user_id,
    u.email,
    p.first_name,
    p.last_name,
    p.image_url,
    p.bio,
    c.id AS chat_id,
    COALESCE(
        (
            SELECT MAX(created_at)
            FROM messages
            WHERE chat_id = c.id
        ),
        match_data.match_date
    ) AS last_interaction
FROM (
    SELECT
        m.id AS match_id,
        m.matched_at AS match_date,
        CASE
            WHEN m.user1_id = $1 THEN m.user2_id
            ELSE m.user1_id
        END AS matched_user_id,
        m.user1_id,
        m.user2_id
    FROM matches m
    WHERE m.user1_id = $1 OR m.user2_id = $1
) AS match_data
JOIN users u ON u.id = match_data.matched_user_id
JOIN profiles p ON p.user_id = u.id
LEFT JOIN chats c ON (
    (c.user1_id = match_data.user1_id AND c.user2_id = match_data.user2_id) OR
    (c.user1_id = match_data.user2_id AND c.user2_id = match_data.user1_id)
)
ORDER BY last_interaction DESC
`

type GetUserMatchesRow struct {
	MatchID         pgtype.UUID      `json:"match_id"`
	MatchDate       pgtype.Timestamp `json:"match_date"`
	MatchedUserID   interface{}      `json:"matched_user_id"`
	Email           string           `json:"email"`
	FirstName       string           `json:"first_name"`
	LastName        string           `json:"last_name"`
	ImageUrl        pgtype.Text      `json:"image_url"`
	Bio             pgtype.Text      `json:"bio"`
	ChatID          pgtype.UUID      `json:"chat_id"`
	LastInteraction pgtype.Timestamp `json:"last_interaction"`
}

func (q *Queries) GetUserMatches(ctx context.Context, user1ID pgtype.UUID) ([]GetUserMatchesRow, error) {
	rows, err := q.db.Query(ctx, getUserMatches, user1ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserMatchesRow{}
	for rows.Next() {
		var i GetUserMatchesRow
		if err := rows.Scan(
			&i.MatchID,
			&i.MatchDate,
			&i.MatchedUserID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.ImageUrl,
			&i.Bio,
			&i.ChatID,
			&i.LastInteraction,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
