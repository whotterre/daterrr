// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chats.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (user1_id, user2_id)
VALUES (
  LEAST($1::uuid, $2::uuid),
  GREATEST($1::uuid, $2::uuid)
)
ON CONFLICT (user1_id, user2_id) DO NOTHING
RETURNING id, user1_id, user2_id, created_at
`

type CreateChatParams struct {
	Column1 pgtype.UUID `json:"column_1"`
	Column2 pgtype.UUID `json:"column_2"`
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRow(ctx, createChat, arg.Column1, arg.Column2)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (chat_id, sender_id, content)
VALUES ($1, $2, $3)
RETURNING id, chat_id, sender_id, content, created_at, read_at
`

type CreateMessageParams struct {
	ChatID   pgtype.UUID `json:"chat_id"`
	SenderID pgtype.UUID `json:"sender_id"`
	Content  string      `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.ChatID, arg.SenderID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.SenderID,
		&i.Content,
		&i.CreatedAt,
		&i.ReadAt,
	)
	return i, err
}

const getChatByUsers = `-- name: GetChatByUsers :one
SELECT id, user1_id, user2_id, created_at FROM chats 
WHERE 
  user1_id = LEAST($1::uuid, $2::uuid) AND
  user2_id = GREATEST($1::uuid, $2::uuid)
`

type GetChatByUsersParams struct {
	Column1 pgtype.UUID `json:"column_1"`
	Column2 pgtype.UUID `json:"column_2"`
}

func (q *Queries) GetChatByUsers(ctx context.Context, arg GetChatByUsersParams) (Chat, error) {
	row := q.db.QueryRow(ctx, getChatByUsers, arg.Column1, arg.Column2)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const getChatMessages = `-- name: GetChatMessages :many
SELECT id, chat_id, sender_id, content, created_at, read_at FROM messages
WHERE chat_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetChatMessages(ctx context.Context, chatID pgtype.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getChatMessages, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.SenderID,
			&i.Content,
			&i.CreatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserChats = `-- name: GetUserChats :many
SELECT id, user1_id, user2_id, created_at FROM chats
WHERE user1_id = $1 OR user2_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetUserChats(ctx context.Context, user1ID pgtype.UUID) ([]Chat, error) {
	rows, err := q.db.Query(ctx, getUserChats, user1ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Chat{}
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.User1ID,
			&i.User2ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
