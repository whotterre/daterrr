// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chats.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (user1_id, user2_id)
VALUES (
  LEAST($1::uuid, $2::uuid),
  GREATEST($1::uuid, $2::uuid)
)
ON CONFLICT (user1_id, user2_id) DO NOTHING
RETURNING id, user1_id, user2_id, created_at
`

type CreateChatParams struct {
	Column1 pgtype.UUID `json:"column_1"`
	Column2 pgtype.UUID `json:"column_2"`
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRow(ctx, createChat, arg.Column1, arg.Column2)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (chat_id, sender_id, content)
VALUES ($1, $2, $3)
RETURNING id, chat_id, sender_id, content, created_at, read_at
`

type CreateMessageParams struct {
	ChatID   pgtype.UUID `json:"chat_id"`
	SenderID pgtype.UUID `json:"sender_id"`
	Content  string      `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.ChatID, arg.SenderID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.SenderID,
		&i.Content,
		&i.CreatedAt,
		&i.ReadAt,
	)
	return i, err
}

const getChatByUsers = `-- name: GetChatByUsers :one
SELECT id, user1_id, user2_id, created_at FROM chats 
WHERE 
  user1_id = LEAST($1::uuid, $2::uuid) AND
  user2_id = GREATEST($1::uuid, $2::uuid)
`

type GetChatByUsersParams struct {
	Column1 pgtype.UUID `json:"column_1"`
	Column2 pgtype.UUID `json:"column_2"`
}

func (q *Queries) GetChatByUsers(ctx context.Context, arg GetChatByUsersParams) (Chat, error) {
	row := q.db.QueryRow(ctx, getChatByUsers, arg.Column1, arg.Column2)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.User1ID,
		&i.User2ID,
		&i.CreatedAt,
	)
	return i, err
}

const getChatMessages = `-- name: GetChatMessages :many
SELECT id, chat_id, sender_id, content, created_at, read_at FROM messages
WHERE chat_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetChatMessages(ctx context.Context, chatID pgtype.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getChatMessages, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.SenderID,
			&i.Content,
			&i.CreatedAt,
			&i.ReadAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConversationsForUser = `-- name: GetConversationsForUser :many
SELECT 
    c.id AS chat_id,
    c.created_at,
    u1.id AS user1_id,
    p1.first_name AS user1_first_name,
    p1.last_name AS user1_last_name,
    p1.image_url AS user1_profile_picture,
    u2.id AS user2_id,
    p2.first_name AS user2_first_name,
    p2.last_name AS user2_last_name,
    p2.image_url AS user2_profile_picture,
    m.id AS last_message_id,
    m.chat_id AS last_message_chat_id,
    m.sender_id AS last_message_sender_id,
    m.content AS last_message_content,
    m.created_at AS last_message_created_at,
    COUNT(m.id) FILTER (WHERE m.read_at IS NULL AND m.sender_id != $1) AS unread_count
FROM chats c
JOIN users u1 ON c.user1_id = u1.id
JOIN users u2 ON c.user2_id = u2.id
JOIN profiles p1 ON u1.id = p1.user_id
JOIN profiles p2 ON u2.id = p2.user_id
LEFT JOIN messages m ON c.id = m.chat_id
WHERE c.user1_id = $1 OR c.user2_id = $1
GROUP BY 
    c.id, 
    c.created_at, 
    u1.id, 
    p1.first_name, 
    p1.last_name, 
    p1.image_url, 
    u2.id, 
    p2.first_name, 
    p2.last_name, 
    p2.image_url, 
    m.id, 
    m.chat_id, 
    m.sender_id, 
    m.content, 
    m.created_at
ORDER BY c.created_at DESC
`

type GetConversationsForUserRow struct {
	ChatID               pgtype.UUID      `json:"chat_id"`
	CreatedAt            pgtype.Timestamp `json:"created_at"`
	User1ID              pgtype.UUID      `json:"user1_id"`
	User1FirstName       string           `json:"user1_first_name"`
	User1LastName        string           `json:"user1_last_name"`
	User1ProfilePicture  pgtype.Text      `json:"user1_profile_picture"`
	User2ID              pgtype.UUID      `json:"user2_id"`
	User2FirstName       string           `json:"user2_first_name"`
	User2LastName        string           `json:"user2_last_name"`
	User2ProfilePicture  pgtype.Text      `json:"user2_profile_picture"`
	LastMessageID        pgtype.UUID      `json:"last_message_id"`
	LastMessageChatID    pgtype.UUID      `json:"last_message_chat_id"`
	LastMessageSenderID  pgtype.UUID      `json:"last_message_sender_id"`
	LastMessageContent   pgtype.Text      `json:"last_message_content"`
	LastMessageCreatedAt pgtype.Timestamp `json:"last_message_created_at"`
	UnreadCount          int64            `json:"unread_count"`
}

func (q *Queries) GetConversationsForUser(ctx context.Context, senderID pgtype.UUID) ([]GetConversationsForUserRow, error) {
	rows, err := q.db.Query(ctx, getConversationsForUser, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetConversationsForUserRow{}
	for rows.Next() {
		var i GetConversationsForUserRow
		if err := rows.Scan(
			&i.ChatID,
			&i.CreatedAt,
			&i.User1ID,
			&i.User1FirstName,
			&i.User1LastName,
			&i.User1ProfilePicture,
			&i.User2ID,
			&i.User2FirstName,
			&i.User2LastName,
			&i.User2ProfilePicture,
			&i.LastMessageID,
			&i.LastMessageChatID,
			&i.LastMessageSenderID,
			&i.LastMessageContent,
			&i.LastMessageCreatedAt,
			&i.UnreadCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserChats = `-- name: GetUserChats :many
SELECT id, user1_id, user2_id, created_at FROM chats
WHERE user1_id = $1 OR user2_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetUserChats(ctx context.Context, user1ID pgtype.UUID) ([]Chat, error) {
	rows, err := q.db.Query(ctx, getUserChats, user1ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Chat{}
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.User1ID,
			&i.User2ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserChatsWithChatID = `-- name: GetUserChatsWithChatID :many
SELECT id AS chat_id, user1_id, user2_id, created_at
FROM chats
WHERE user1_id = $1 OR user2_id = $1
ORDER BY created_at DESC
`

type GetUserChatsWithChatIDRow struct {
	ChatID    pgtype.UUID      `json:"chat_id"`
	User1ID   pgtype.UUID      `json:"user1_id"`
	User2ID   pgtype.UUID      `json:"user2_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetUserChatsWithChatID(ctx context.Context, user1ID pgtype.UUID) ([]GetUserChatsWithChatIDRow, error) {
	rows, err := q.db.Query(ctx, getUserChatsWithChatID, user1ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserChatsWithChatIDRow{}
	for rows.Next() {
		var i GetUserChatsWithChatIDRow
		if err := rows.Scan(
			&i.ChatID,
			&i.User1ID,
			&i.User2ID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
