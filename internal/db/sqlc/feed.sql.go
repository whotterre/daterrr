// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFeed = `-- name: CreateFeed :many
SELECT
    u.id,
    u.email,
    u.created_at,
    u.last_active,
    p.first_name,
    p.last_name,
    p.bio,
    p.gender,
    p.age,
    p.image_url,
    p.interests,
    p.location
FROM users u 
JOIN profiles p ON u.id = p.user_id
WHERE p.gender = $1 AND p.age BETWEEN $2 AND $3
LIMIT 10
`

type CreateFeedParams struct {
	Gender string `json:"gender"`
	Age    int32  `json:"age"`
	Age_2  int32  `json:"age_2"`
}

type CreateFeedRow struct {
	ID         pgtype.UUID      `json:"id"`
	Email      string           `json:"email"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	LastActive pgtype.Timestamp `json:"last_active"`
	FirstName  string           `json:"first_name"`
	LastName   string           `json:"last_name"`
	Bio        pgtype.Text      `json:"bio"`
	Gender     string           `json:"gender"`
	Age        int32            `json:"age"`
	ImageUrl   pgtype.Text      `json:"image_url"`
	Interests  []string         `json:"interests"`
	Location   pgtype.Point     `json:"location"`
}

// I should include a location component in this query
func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) ([]CreateFeedRow, error) {
	rows, err := q.db.Query(ctx, createFeed, arg.Gender, arg.Age, arg.Age_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CreateFeedRow{}
	for rows.Next() {
		var i CreateFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CreatedAt,
			&i.LastActive,
			&i.FirstName,
			&i.LastName,
			&i.Bio,
			&i.Gender,
			&i.Age,
			&i.ImageUrl,
			&i.Interests,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
