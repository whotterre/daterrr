// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	CheckMutualSwipe(ctx context.Context, arg CheckMutualSwipeParams) (bool, error)
	CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error)
	CreateMatch(ctx context.Context, arg CreateMatchParams) (pgtype.UUID, error)
	CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error)
	CreateNewUser(ctx context.Context, arg CreateNewUserParams) (CreateNewUserRow, error)
	CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error)
	//---------------------------------------
	// 3. PASSWORD RESET
	//---------------------------------------
	// Generate password reset token
	CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) (PasswordResetToken, error)
	// After successful login: Create session
	CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error)
	DeleteNotification(ctx context.Context, arg DeleteNotificationParams) error
	// Logout: Delete session
	DeleteSession(ctx context.Context, token string) error
	// Delete user and profile with confirmation
	DeleteUserWithProfile(ctx context.Context, id pgtype.UUID) (DeleteUserWithProfileRow, error)
	FindExistingMatch(ctx context.Context, arg FindExistingMatchParams) (pgtype.UUID, error)
	GenerateFeed(ctx context.Context, id pgtype.UUID) ([]GenerateFeedRow, error)
	GetChatByUsers(ctx context.Context, arg GetChatByUsersParams) (Chat, error)
	GetChatMessages(ctx context.Context, chatID pgtype.UUID) ([]Message, error)
	GetConversationsForUser(ctx context.Context, senderID pgtype.UUID) ([]GetConversationsForUserRow, error)
	//---------------------------------------
	// 2. SESSION MANAGEMENT
	//---------------------------------------
	// Middleware: Check if token is valid
	GetSessionByToken(ctx context.Context, token string) (GetSessionByTokenRow, error)
	GetUnreadNotificationsCount(ctx context.Context, userID pgtype.UUID) (int64, error)
	GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error)
	GetUserByID(ctx context.Context, id pgtype.UUID) (GetUserByIDRow, error)
	GetUserChats(ctx context.Context, user1ID pgtype.UUID) ([]Chat, error)
	GetUserChatsWithChatID(ctx context.Context, user1ID pgtype.UUID) ([]GetUserChatsWithChatIDRow, error)
	//---------------------------------------
	// 1. LOGIN FUNCTIONALITY
	//---------------------------------------
	// For login page: Get user by email + password hash
	GetUserForLogin(ctx context.Context, email string) (GetUserForLoginRow, error)
	GetUserMatches(ctx context.Context, user1ID pgtype.UUID) ([]GetUserMatchesRow, error)
	GetUserNotifications(ctx context.Context, arg GetUserNotificationsParams) ([]Notification, error)
	// Get complete user profile by ID
	GetUserProfile(ctx context.Context, id pgtype.UUID) (GetUserProfileRow, error)
	//djd
	// Validate reset token (24-hour expiry)
	GetValidPasswordResetToken(ctx context.Context, tokenHash string) (PasswordResetToken, error)
	MarkAllNotificationsAsRead(ctx context.Context, userID pgtype.UUID) error
	MarkNotificationAsRead(ctx context.Context, arg MarkNotificationAsReadParams) error
	// After password update: Mark token as used
	MarkResetTokenUsed(ctx context.Context, tokenHash string) error
	// Handle swipes
	NewSwipe(ctx context.Context, arg NewSwipeParams) error
	UpdateLastActive(ctx context.Context, id pgtype.UUID) error
	UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error)
	UserExists(ctx context.Context, email string) (bool, error)
}

var _ Querier = (*Queries)(nil)
